version: 2.1

orbs:
    browser-tools: circleci/browser-tools@1.2.4
    kubernetes: circleci/kubernetes@1.3.0
    k8s: digitalocean/k8s@0.1.1
    helm: circleci/helm@1.2.0
    envsubst: sawadashota/envsubst@1.1.0

commands:
    install_monorepo:
      steps:
        - run: yarn install
        - run: yarn add -W apollo-datasource-mongodb && yarn add -W mongodb && yarn add -W @rollup/plugin-graphql

    login_docker:
      steps:
        - run: echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin

    test_monorepo:
      steps:
        - run: yarn run tests

    build_ui_command:
      steps:
        - run: yarn run build

    deploy_ui_command:
      steps:
        - run: curl -sL https://firebase.tools | bash
        - run: firebase --token $FIREBASE_TOKEN deploy

jobs:

    build_and_deploy_microservice_analysis:
      docker:
        - image: 'cimg/base:stable'

      working_directory: ~/project

      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.7
        - login_docker
        - k8s/install
        - k8s/initialize:
            cluster: predecos-kubernetes-cluster
        - run:
            command: docker build -t thinkdeeptech/deep-microservice-analysis:${CIRCLE_BUILD_NUM} -t thinkdeeptech/deep-microservice-analysis:latest .
            working_directory: ./packages/deep-microservice-analysis
        - run: docker push thinkdeeptech/deep-microservice-analysis:${CIRCLE_BUILD_NUM}
        - run: docker push thinkdeeptech/deep-microservice-analysis:latest
        - helm/install-helm-client:
            version: v3.7.2
        - run:
            name: Download project dependencies
            command: helm dependency update
            working_directory: ./packages/deep-microservice-analysis
        - helm/upgrade-helm-chart:
            chart: "./packages/deep-microservice-analysis"
            helm-version: "v3.7.2"
            namespace: "default"
            recreate-pods: true
            release-name: "deep-microservice-analysis-latest"
            values-to-override: "kafka.host=$PREDECOS_KAFKA_HOST,kafka.port=$PREDECOS_KAFKA_PORT,namespace=default,nodeEnv=$NODE_ENV"
            update-repositories: true
            wait: true
        # - run:
        #     name: Delete Microservice
        #     command: helm uninstall deep-microservice-analysis-latest
        # - run:
        #     name: Install Microservice
        #     command: helm install deep-microservice-analysis-latest ./deep-microservice-analysis --set mongodb.auth.rootUser=$MONGODB_USERNAME --set mongodb.auth.rootPassword=$MONGODB_ROOT_PASSWORD --set namespace=default --set replicas=1 --set kafka.host=$PREDECOS_KAFKA_HOST --set kafka.port=$PREDECOS_KAFKA_PORT
        #     working_directory: ./packages
        # - kubernetes/delete-resource:
        #     now: true
        #     resource-names: deep-microservice-analysis-deployment
        #     resource-types: deployments
        #     wait: true
        # - kubernetes/create-or-update-resource:
        #     get-rollout-status: true
        #     resource-file-path: ./packages/deep-microservice-analysis/k8s/deep-microservice-analysis-deployment.yml
        #     resource-name: deployment/deep-microservice-analysis-deployment
        #     show-kubectl-command: true

    build_and_deploy_microservice_collection:
      docker:
        - image: 'cimg/base:stable'

      working_directory: ~/project

      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.7
        - login_docker
        - k8s/install
        - k8s/initialize:
            cluster: predecos-kubernetes-cluster
        - run:
            command: docker build -t thinkdeeptech/deep-microservice-collection:${CIRCLE_BUILD_NUM} -t thinkdeeptech/deep-microservice-collection:latest .
            working_directory: ./packages/deep-microservice-collection
        - run: docker push thinkdeeptech/deep-microservice-collection:${CIRCLE_BUILD_NUM}
        - run: docker push thinkdeeptech/deep-microservice-collection:latest
        - helm/install-helm-client:
            version: v3.7.2
        - run:
            name: Download project dependencies
            command: helm dependency update
            working_directory: ./packages/deep-microservice-collection
        - helm/upgrade-helm-chart:
            chart: "./packages/deep-microservice-collection"
            helm-version: "v3.7.2"
            namespace: "default"
            recreate-pods: true
            release-name: "deep-microservice-collection-latest"
            values-to-override: "kafka.host=$PREDECOS_KAFKA_HOST,kafka.port=$PREDECOS_KAFKA_PORT,twitter.bearer=$PREDECOS_TWITTER_BEARER,nodeEnv=$NODE_ENV"
            update-repositories: true
            wait: true
        # - kubernetes/delete-resource:
        #     now: true
        #     resource-names: deep-microservice-collection-deployment
        #     resource-types: deployments
        #     wait: true
        # - kubernetes/create-or-update-resource:
        #     get-rollout-status: true
        #     resource-file-path: ./packages/deep-microservice-collection/k8s/deep-microservice-collection-deployment.yml
        #     resource-name: deployment/deep-microservice-collection-deployment
        #     show-kubectl-command: true

    build_and_deploy_microservice_configuration:
      docker:
        - image: 'cimg/base:stable'

      working_directory: ~/project

      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.7
        - login_docker
        - k8s/install
        - k8s/initialize:
            cluster: predecos-kubernetes-cluster
        - run:
            command: docker build -t thinkdeeptech/deep-microservice-configuration:${CIRCLE_BUILD_NUM} -t thinkdeeptech/deep-microservice-configuration:latest .
            working_directory: ./packages/deep-microservice-configuration
        - run: docker push thinkdeeptech/deep-microservice-configuration:${CIRCLE_BUILD_NUM}
        - run: docker push thinkdeeptech/deep-microservice-configuration:latest
        - helm/install-helm-client:
            version: v3.7.2
        - run:
            name: Download project dependencies
            command: helm dependency update
            working_directory: ./packages/deep-microservice-configuration
        - helm/upgrade-helm-chart:
            chart: "./packages/deep-microservice-configuration"
            helm-version: "v3.7.2"
            namespace: "default"
            recreate-pods: true
            release-name: "deep-microservice-configuration-latest"
            values-to-override: "namespace=default,nodeEnv=$NODE_ENV"
            update-repositories: true
            wait: true
        # - kubernetes/delete-resource:
        #     now: true
        #     resource-names: deep-microservice-configuration-deployment
        #     resource-types: deployments
        #     wait: true
        # - kubernetes/create-or-update-resource:
        #     get-rollout-status: true
        #     resource-file-path: ./packages/deep-microservice-configuration/k8s/deep-microservice-configuration-deployment.yml
        #     resource-name: deployment/deep-microservice-configuration-deployment
        #     show-kubectl-command: true

    build_and_deploy_microservice_gateway:
      docker:
        - image: 'cimg/base:stable'

      working_directory: ~/project

      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.7
        - login_docker
        - k8s/install
        - k8s/initialize:
            cluster: predecos-kubernetes-cluster
        - run:
            command: docker build -t thinkdeeptech/deep-microservice-gateway:${CIRCLE_BUILD_NUM} -t thinkdeeptech/deep-microservice-gateway:latest .
            working_directory: ./packages/deep-microservice-gateway
        - run: docker push thinkdeeptech/deep-microservice-gateway:${CIRCLE_BUILD_NUM}
        - run: docker push thinkdeeptech/deep-microservice-gateway:latest
        - helm/install-helm-client:
            version: v3.7.2
        - run:
            name: Download project dependencies
            command: helm dependency update
            working_directory: ./packages/deep-microservice-gateway
        - helm/upgrade-helm-chart:
            chart: "./packages/deep-microservice-gateway"
            helm-version: "v3.7.2"
            namespace: "default"
            recreate-pods: true
            release-name: "deep-microservice-gateway-latest"
            values-to-override: "auth.audience=$PREDECOS_AUTH_AUDIENCE,auth.jwksUri=$PREDECOS_AUTH_JWKS_URI,auth.issuer=PREDECOS_AUTH_ISSUER,microservice.analysis.url=$PREDECOS_MICROSERVICE_ANALYSIS_URL,microservice.collection.url=$PREDECOS_MICROSERVICE_COLLECTION_URL,microservice.configuration.url=$PREDECOS_MICROSERVICE_CONFIGURATION_URL,replicas=1,namespace=default,nodeEnv=$NODE_ENV"
            update-repositories: true
            wait: true
        # - kubernetes/delete-resource:
        #     now: true
        #     resource-names: deep-microservice-gateway-deployment
        #     resource-types: deployments
        #     wait: true
        # - kubernetes/create-or-update-resource:
        #     get-rollout-status: true
        #     resource-file-path: ./packages/deep-microservice-gateway/k8s/deep-microservice-gateway-deployment.yml
        #     resource-name: deployment/deep-microservice-gateway-deployment
        #     show-kubectl-command: true

    build_and_deploy_microservice_subscription:
      docker:
        - image: 'cimg/base:stable'

      working_directory: ~/project

      steps:
        - checkout
        - envsubst/install
        - setup_remote_docker:
            version: 20.10.7
        - login_docker
        - k8s/install
        - k8s/initialize:
            cluster: predecos-kubernetes-cluster
        - run:
            command: docker build -t thinkdeeptech/deep-microservice-subscription:${CIRCLE_BUILD_NUM} -t thinkdeeptech/deep-microservice-subscription:latest .
            working_directory: ./packages/deep-microservice-subscription
        - run: docker push thinkdeeptech/deep-microservice-subscription:${CIRCLE_BUILD_NUM}
        - run: docker push thinkdeeptech/deep-microservice-subscription:latest
        - helm/install-helm-client:
            version: v3.7.2
        - run:
            name: Download project dependencies
            command: helm dependency update
            working_directory: ./packages/deep-microservice-subscription
        - helm/upgrade-helm-chart:
            chart: "./packages/deep-microservice-subscription"
            helm-version: "v3.7.2"
            namespace: "default"
            recreate-pods: true
            release-name: "deep-microservice-subscription-latest"
            values-to-override: "auth.audience=$PREDECOS_AUTH_AUDIENCE,auth.jwksUri=$PREDECOS_AUTH_JWKS_URI,auth.issuer=PREDECOS_AUTH_ISSUER,kafka.host=$PREDECOS_KAFKA_HOST,kafka.port=$PREDECOS_KAFKA_PORT,microservice.analysis.url=$PREDECOS_MICROSERVICE_ANALYSIS_URL,microservice.collection.url=$PREDECOS_MICROSERVICE_COLLECTION_URL,microservice.configuration.url=$PREDECOS_MICROSERVICE_CONFIGURATION_URL,replicas=1,namespace=default,nodeEnv=$NODE_ENV"
            update-repositories: true
            wait: true
        # - kubernetes/delete-resource:
        #     now: true
        #     resource-names: deep-microservice-subscription-deployment
        #     resource-types: deployments
        #     wait: true
        # - run:
        #     command: envsubst < ./deep-microservice-subscription-deployment.yml | kubectl apply -f -
        #     working_directory: ./packages/deep-microservice-subscription/k8s

    build_ui:
      docker:
          - image: 'cimg/node:14.17.6'

      working_directory: ~/project

      steps:
          - run:
              name: Update repositories
              command: sudo apt-get update
          - run:
              name: Install firefox dependency (take this out when browser-tools orb is fixed)
              command: sudo apt-get install -y libasound-dev
          - browser-tools/install-browser-tools
          - checkout
          - install_monorepo
          - test_monorepo
          - build_ui_command


    deploy_kafka:
      docker:
        - image: 'cimg/base:stable'

      working_directory: ~/project

      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.7
        - login_docker
        - k8s/install
        - k8s/initialize:
            cluster: predecos-kubernetes-cluster
        - helm/install-helm-client:
            version: v3.7.2
        - run:
            name: Add Bitnami Repository
            command: helm repo add bitnami https://charts.bitnami.com/bitnami
        # - run:
        #     name: Update Repositories
        #     command: helm repo update
        - helm/upgrade-helm-chart:
            chart: "bitnami/kafka"
            version: "15.1.0"
            helm-version: "v3.7.2"
            recreate-pods: true
            release-name: "kafka-latest"
            reuse-values: true
            update-repositories: true
        # - run:
        #     name: Uninstall previous Kafka chart
        #     command: helm uninstall kafka-latest
        # - run:
        #     name: Install Kafka
        #     command: helm install --set autoCreateTopicsEnable=true kafka-latest bitnami/kafka --version "15.1.0"

    # deploy_mongodb:
    #   docker:
    #     - image: 'cimg/base:stable'

    #   working_directory: ~/project

    #   steps:
    #     - checkout
    #     - setup_remote_docker:
    #         version: 20.10.7
    #     - login_docker
    #     - k8s/install
    #     - k8s/initialize:
    #         cluster: predecos-kubernetes-cluster
    #     - helm/install-helm-client:
    #         version: v3.7.2
    #     - run:
    #         name: Add Bitnami Repository
    #         command: helm repo add bitnami https://charts.bitnami.com/bitnami
        # - run:
        #     name: Update Repositories
        #     command: helm repo update
        # - run:
        #     name: Uninstall previous MongoDB chart
        #     command: helm uninstall mongodb-latest
        # - helm/upgrade-helm-chart:
        #     chart: "bitnami/mongodb"
        #     version: "11.0.3"
        #     helm-version: "v3.7.2"
        #     namespace: "default"
        #     recreate-pods: true
        #     release-name: "mongodb-latest"
        #     reuse-values: true
        #     update-repositories: true

        # - run:
        #     name: Install MongoDB
        #     command: helm install mongodb-latest bitnami/mongodb --version="11.0.3"

    deploy_ui:
      docker:
          - image: 'cimg/node:14.17.6'

      working_directory: ~/project

      steps:
          - checkout
          - install_monorepo
          - build_ui_command
          - deploy_ui_command


workflows:

  version: 2

  build_and_deploy_if_master:

    jobs:

      - deploy_kafka:
          filters:
            branches:
              only: master

      # - deploy_mongodb:
      #     filters:
      #       branches:
      #         only: master

      - build_and_deploy_microservice_collection:
          requires:
            - deploy_kafka
            # - deploy_mongodb
          filters:
            branches:
              only: master

      - build_and_deploy_microservice_analysis:
          requires:
            - build_and_deploy_microservice_collection
            - deploy_kafka
            # - deploy_mongodb
          filters:
            branches:
              only: master

      - build_and_deploy_microservice_configuration:
          # requires:
          #   - deploy_mongodb
          filters:
            branches:
              only: master

      - build_and_deploy_microservice_gateway:
          requires:
            - build_and_deploy_microservice_collection
            - build_and_deploy_microservice_analysis
            - build_and_deploy_microservice_configuration
          filters:
            branches:
              only: master

      - build_and_deploy_microservice_subscription:
          requires:
            - build_and_deploy_microservice_collection
            - build_and_deploy_microservice_analysis
            - build_and_deploy_microservice_configuration
            - deploy_kafka
          filters:
            branches:
              only: master

      - build_ui

      - deploy_ui:
          requires:
            - build_and_deploy_microservice_gateway
            - build_and_deploy_microservice_subscription
            - build_ui
          filters:
            branches:
              only: master
